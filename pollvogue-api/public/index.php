<?php
/**
 * Step 1: Require the Slim Framework
 *
 * If you are not using Composer, you need to require the
 * Slim Framework and register its PSR-0 autoloader.
 *
 * If you are using Composer, you can skip this step.
 */
// require __DIR__ .'/../vendor/autoload.php';
require '../vendor/autoload.php';


// require 'Slim/Slim.php';
// \Slim\Slim::registerAutoloader();

/**
 * Step 2: Instantiate a Slim application
 *
 * This example instantiates a Slim application using
 * its default settings. However, you will usually configure
 * your Slim application now by passing an associative array
 * of setting names and values into the application constructor.
 */

$app = new \Slim\Slim(array
    (
        'debug' => true,
        'mode' => 'development'
    )
);
 

//Add authentication and Cache middlewares
$app->add(new \Authentication());

/**
 * Step 3: Define the Slim application routes
 *
 * Here we define several Slim application routes that respond
 * to appropriate HTTP request methods. In this example, the second
 * argument for `Slim::get`, `Slim::post`, `Slim::put`, `Slim::patch`, and `Slim::delete`
 * is an anonymous function.
 **/

// GET route

$json_output = array();
define('TOKEN_EXPIRY_PERIOD', '+15 days');
define('YEARLY_EXPIRY_PERIOD', '+1 year');
define('MONTHLY_EXPIRY_PERIOD', '+1 month');

//Test Config
define('MERCHANT_ID', '01817'); //the ID auto-generated by CIPG for the merchant.

$redirect_url = array(
    'success' => 'localhost/pages/success.html',
    'failure' => 'localhost/pages/failure.html',
    'pending' => 'localhost/pages/pending.html',
    'cancelled' => 'localhost/pages/cancelled.html',
    'not_processed' => 'localhost/pages/not_processed.html'
);




$app->get('/', function() use ($app) {

    //Set the response header to json
    $app->response->header('Content-Type', 'application/json');

    $json_output['meta']["status"] = 0;
    $json_output['meta']["message"] = "Welcome to Pollvogue REST API";
    
    $json_output['data']["name"] = "API - Pollvogue Mobile Application";
    $json_output['data']["version"] = '1.0';
    $json_output['data']["company"] = 'iQube Labs';
    $json_output['data']["author"] = "Amowogbaje Gideon";
    $json_output['data']["date"] = "Thursday 21, May 2015";
    echo json_encode($json_output);

});


$app->post('/login', function() use ($app){
    
    $json_output['meta']["status"] = 0;
    $json_output['meta']["message"] = "";

    try {
        
        $nickname = $app->request->post('nickname');
        $password = $app->request->post('password');

        if(isset($nickname) && isset($password)) {
            
            $pass = hash('sha512', $password);
            $user = User::select('id', 'nickname','phonenumber', 'password')
                        ->whereRaw('nickname = ? and password = ?', array($nickname, $pass))
                        ->first();

            if(isset($user)) {
                $userToken = new Usertoken;

                $now = date('Y-m-d h:i:s');
                $token = hash('md5', $now);
                $app->setCookie('token', $token, '3 days');
                $expirydate = strtotime(TOKEN_EXPIRY_PERIOD);
                $str_expirydate = date('Y-m-d h:i:s', $expirydate);
                
                $userToken = Usertoken::where('user_id', '=', $user->id)->first();
                
                if(!isset($userToken))
                    $userToken = new Usertoken;

                $userToken->user_id = $user->id;
                $userToken->token = $token;
                $userToken->expires = $str_expirydate;
                $userToken->lastusedate = $now;
                $userToken->save();


                $json_output['meta']["status"] = 0;
                $json_output['meta']["message"] = "Login successfully";
                
                $userArray = $user->toArray();
                $userArray['token'] = $token;
                $userArray['password'] = "*****";
                $json_output['data']['user'] = $userArray;

            } else {

                $json_output['meta']["status"] = 2;
                $json_output['meta']["message"] = "Invalid Nickname and/or Password!";
            }

        } else {

            $json_output['meta']["status"] = 3;
            $json_output['meta']["message"] = "Nickname or Password cannot be empty!";
        } 

        $app->response->header('Content-Type', 'application/json');
        echo json_encode($json_output);

    } catch (Exception $e) {
        print_r($e->getMessage());
    }

});


$app->post('/logout', function() use ($app){
    

    try {
                $app->deleteCookie('token');
        
        //$nickname = $app->request->post('nickname');
        //$password = $app->request->post('password') 

            $json_output['meta']["status"] = 0;
            $json_output['meta']["message"] = "Logged out Successfully";


        $app->response->header('Content-Type', 'application/json');
        echo json_encode($json_output);

        } catch (Exception $e) {
             print_r($e->getMessage());
         }

});


$app->post('/register', function() use ($app) {

    try {

        $user = new User;
        $user->phonenumber = $app->request->post('phonenumber');

        //Remove duplicate entries
        $dResult = User::where('phonenumber', '=', $user->phonenumber)->first();

        if(!empty($dResult)) {
            $user = $dResult;
        } else {


            $user->nickname = $app->request->post('nickname');
            $user->phonenumber = $app->request->post('phonenumber');
           // $user->password = $app->request->get('password');
            $pass = $app->request->post('password');
            $user->password = hash('sha512', $pass);
            $user->save();
        }

        unset($user->password);

        /*$userToken = Usertoken::where('user_id', '=', $user->id)->first();

        if(!isset($userToken))*/

        $dataUser["user"] = $user->toArray();

        echoJSONResponse($app, 0, "User Created successfully!", $dataUser);

    } catch (Exception $e) {

        sendUnknownError($app, $e);
    }

});


$app->get('/user/:id', function($id) use ($app){
    

    try {
        
        //$id = $app->request->get('id');
            $user = User::find($id);
            //$user = User::select('id', 'nickname','phonenumber', 'password')
            //           ->find($id);
            if (isset($user)) 
            {
                   
                    $json_output['meta']["status"] = 0;
                    $json_output['meta']["message"] = "Request successfully";
                    
                    $friendArray = $user->toArray();
                    $list = $friendArray['friend'];
                    $friendArray['password'] = "*****";
                    $listOfFriendRequest = $friendArray['friend_requests'];
                    $listOfSentFriend = $friendArray['friends_to_be'];
                    $list_to_array = explode(", ", $list);
                    $listOfFriendRequestlist_to_array = explode(", ", $listOfFriendRequest);
                    $listOfSentFriend_to_array = explode(", ", $listOfSentFriend);
                    $friend_list = array();
                    $friend_request_list = array();
                    $friend_sent_request = array();
                    $i = 0;
                        foreach ($list_to_array as $key => $value) 
                        {
                            $friend_list["friend".$i] = $value;
                            $i++;

                        }

                    $j = 0;
                        foreach ($listOfFriendRequestlist_to_array as $key => $value) 
                        {
                            $friend_request_list["friendRequest".$j] = $value;
                            $j++;

                        }
                    $k = 0;
                        foreach ($listOfSentFriend_to_array as $key => $value) 
                        {
                            $friend_sent_request["friendRequestSent".$k] = $value;
                            $k++;

                        }
                    $friendArray['friend'] = $friend_list;
                    $friendArray['friend_requests'] = $friend_request_list;
                    $friendArray['friends_to_be'] = $friend_sent_request;
                    $json_output['data']['user'] = $friendArray;
            
            }
            else 
            {
                    $json_output['meta']["status"] = 2;
                    $json_output['meta']["message"] = "A user with that id doesnot exist"; 
            }
                   


        $app->response->header('Content-Type', 'application/json');
        echo json_encode($json_output);

    } catch (Exception $e) {
        print_r($e->getMessage());
    }
});


$app->get('/user', function() use ($app){
    

    try {
        
        //$id = $app->request->get('id');
            $user = User::all();

                $json_output['meta']["status"] = 0;
                $json_output['meta']["message"] = "Request successfully";
                
                $userArray = $user->toArray();
                $id =0;
                foreach ($userArray as $key => $value) {
                $userArray[$id]['password'] = "*****";
                $id++;
                }
                $json_output['data']['user'] = $userArray;


        $app->response->header('Content-Type', 'application/json');
        echo json_encode($json_output);

    } catch (Exception $e) {
        print_r($e->getMessage());
    }
});


$app->get('/friends/sendrequest', function() use ($app){
    

    try {
            $nickname = strtolower($app->request->get('nickname'));
           $token = $app->getCookie('token');
           $findId = Usertoken::select('user_id')
                        ->whereRaw('token = ?', array($token))
                        ->first();

                if (isset($findId)) 
                {
                
                $userId = $findId->toArray();
                $user_id = $userId['user_id'];

                $friend = User::select('id', 'nickname','friend', 'friends_to_be', 'friend_requests')
                                    ->whereRaw('id = ?', array($user_id))
                                    ->first();
                $Otherfriend = User::select('id', 'nickname','friend', 'friends_to_be', 'friend_requests')
                                    ->whereRaw('nickname = ?', array($nickname))
                                    ->first();

                $CheckIfFriendExist = User::select('id', 'nickname','friend', 'friends_to_be', 'friend_requests')
                                    ->whereRaw('id = ?', array($user_id))
                                    ->where('friends_to_be', 'LIKE', '%'.$nickname.'%')
                                    ->orwhere('friend', 'LIKE', '%'.$nickname.'%')
                                    ->first();

                    if (isset($nickname)) 
                    {
                       
                            if (isset($friend) and isset($Otherfriend)) 
                            {
                                $friendList = $friend->toArray();
                                $OtherfriendList = $Otherfriend->toArray();
                                // put friends name in a long string
                                $listOfSentFriendRequest = $friendList['friends_to_be'];

                                $listOfFriendRequestReceived = $friendList['friend_requests'];

                                if (!isset($CheckIfFriendExist)) 
                                {
                                    
                                        if (trim($listOfSentFriendRequest) == "" || $listOfSentFriendRequest== null) 
                                        {
                                            $listOfSentFriendRequest = $OtherfriendList['nickname'];


                                                if (trim($listOfFriendRequestReceived) == "" || $listOfFriendRequestReceived == null) 
                                                {
                                                    $listOfFriendRequestReceived = $friendList['nickname'];
                                                }
                                                else
                                                {
                                                    $listOfFriendRequestReceived = $listOfFriendRequestReceived.", ".$friendList['nickname'];
                                                }

                                            $json_output['meta']["status"] = 0;
                                            $json_output['meta']["message"] = "Friend Request has been sent";

                                        }
                                        else 
                                        {
                                                $listOfSentFriendRequest = $listOfSentFriendRequest.", ".$OtherfriendList['nickname'];
                                                
                                                if (trim($listOfFriendRequestReceived) == "" || $listOfFriendRequestReceived == null) 
                                                {
                                                    $listOfFriendRequestReceived = $friendList['nickname'];
                                                }
                                                else
                                                {
                                                    $listOfFriendRequestReceived = $listOfFriendRequestReceived.", ".$friendList['nickname'];
                                                }
                                                
                                            $json_output['meta']["status"] = 0;
                                            $json_output['meta']["message"] = "Friend Request has been sent";
                                        }


                                    //$json_output['data']['user'] = $friendList;
                                   // $json_output['data']['user']['friii'] = $CheckIfFriendExist;
                                    $friend->friends_to_be = $listOfSentFriendRequest;
                                    $friend->save();

                                    $Otherfriend->friend_requests = $listOfFriendRequestReceived;
                                    $Otherfriend->save();
                                        
                                }
                                else
                                {
                                    $json_output['meta']["status"] = 2;
                                    $json_output['meta']["message"] = "Friend had already been added";
                                }

                                
                            }

                            elseif (!isset($Otherfriend))
                            {
                                $json_output['meta']["status"] = 2;
                                $json_output['meta']["message"] = "Nickname is not on this platform";
                            }
                            else
                            {
                                $json_output['meta']["status"] = 2;
                                $json_output['meta']["message"] = "Out of Bound";
                            }
                    }
                    else
                    {
                        $json_output['meta']["status"] = 2;
                        $json_output['meta']["message"] = "nickname cannot be null or the get value of nickname has not been set";
                    }




                }
                else 
                {
                    $json_output['meta']["status"] = 2;
                    $json_output['meta']["message"] = "Out of Bound";
                }





        $app->response->header('Content-Type', 'application/json');
        echo json_encode($json_output);

    } catch (Exception $e) {
        print_r($e->getMessage());
    }
});


$app->get('/friends/acceptrequest', function() use ($app){
    

    try {
            $nickname = strtolower($app->request->get('nickname'));
            $token = $app->getCookie('token');
            $findId = Usertoken::select('user_id')
                        ->whereRaw('token = ?', array($token))
                        ->first();

                if (isset($findId)) 
                {
                
                $userId = $findId->toArray();
                $user_id = $userId['user_id'];

                $friend = User::select('id', 'nickname','friend', 'friends_to_be', 'friend_requests')
                                    ->whereRaw('id = ?', array($user_id))
                                    ->first();
                $Otherfriend = User::select('id', 'nickname','friend', 'friends_to_be', 'friend_requests')
                                    ->whereRaw('nickname = ?', array($nickname))
                                    ->first();


                   if (isset($nickname)) 
                   {
                        $friendList = $friend->toArray();
                        
                        $OtherfriendList = $Otherfriend->toArray();
                        // put friends name in a long string
                        $listOfSentFriendRequest = $OtherfriendList['friends_to_be'];

                        $listOfFriendRequestReceived = $friendList['friend_requests'];

                        $friend_list = $friendList['friend'];

                        $mutual_friend_list = $OtherfriendList['friend'];

                        if (isset($Otherfriend)) 
                        {
                                    
                                        
                                        $friend_processing = explode(", ", $listOfSentFriendRequest);

                                            foreach ($friend_processing as $key => $value) 
                                            {
                                                
                                                $load[$value] = $value;
                                                if ($value == $friendList['nickname']) 
                                                {
                                                    $unset = $value;
                                                }

                                            }
                                                if (!isset($load[$unset])) 
                                                {
                                                    return false;
                                                }
                                                elseif (isset($load[$unset])) 
                                                {
                                                    unset($load[$unset]); 
                                                    $friend_list = $friend_list.", ".$unset;
                                            
                                                }

                                        $friend_process = explode(", ", $listOfFriendRequestReceived);

                                            foreach ($friend_process as $key => $value) 
                                            {
                                                
                                                $load_friend[$value] = $value;
                                                if ($value == $nickname) 
                                                {
                                                    $unset_friend = $value;
                                                }

                                            }
                                                
                                                if (!isset($load_friend[$unset_friend])) 
                                                {
                                                    return false;
                                                }
                                                elseif (isset($load_friend[$unset_friend])) 
                                                {
                                                    unset($load_friend[$unset_friend]); 
                                                    $mutual_friend_list = $mutual_friend_list.", ".$unset_friend;
                                            
                                                }
                                        
                                    $json_output['meta']["status"] = 0;
                                    $json_output['meta']["message"] = ucfirst($unset)." is now your friend";



                           // $json_output['data']['user'] = $friendList;
                           // $json_output['data']['user']['friii'] = $listOfFriendRequestReceived;
                            $friend->friends_to_be = implode(", ", $load);
                            $friend->friend = $friend_list;
                            $friend->save();

                            $Otherfriend->friend_requests = implode(", ", $load_friend);
                            $Otherfriend->friend = $mutual_friend_list;
                            $Otherfriend->save();
                                
                        }
                        else
                        {
                            $json_output['meta']["status"] = 2;
                            $json_output['meta']["message"] = "the GET value of nickname has not been set";
                        }

                        
                    }

                    elseif (!isset($Otherfriend))
                    {
                        $json_output['meta']["status"] = 2;
                        $json_output['meta']["message"] = "Nickname did not send you any request";
                    }

                    else
                    {
                        $json_output['meta']["status"] = 2;
                        $json_output['meta']["message"] = "Out of Bound";
                    }



                }
                else 
                {
                    $json_output['meta']["status"] = 2;
                    $json_output['meta']["message"] = "Out of Bound";
                }





        $app->response->header('Content-Type', 'application/json');
        echo json_encode($json_output);

    } catch (Exception $e) {
        print_r($e->getMessage());
    }
});


$app->post('/image/post', function() use ($app) {

    try {

            // specify Url to upload Images
            $url_prefix = "../contents/";
            $folder = $url_prefix."imagesforpoll";
            $ImageObject = new ImagePoll;
            $user_id = 2;
            // id is user authenticated Id
            //$id = $_SESSION['id'];

            if (!is_dir($folder)) 
            {

               mkdir($folder);

            } 
                                            $text_input = $app->request->post('text');
                                            $duration = $app->request->post('duration');
                                            $imagetitle = $app->request->post('imagetitle');
            if(!isset($_FILES["image"]["name"]) or !isset($text_input) or !isset($duration) or !isset($imagetitle))
            {

                $json_output['meta']["status"] = 3;
                $json_output['meta']["message"] = "Make sure all your Parameters has been set";
            }
            else 
                        {
                             $no = ImagePoll::count();
                             echo $no;
                             $newFilename = md5($no);

                            if ((($_FILES["image"]["type"] == "image/gif")||($_FILES["image"]["type"] == "image/jpeg")|| ($_FILES["image"]["type"] == "image/png")|| ($_FILES["image"]["type"] == "image/pjpeg"))&& ($_FILES["image"]["size"] < 2000000)) 
                            {
                                $ext = pathinfo($_FILES["image"]["name"], PATHINFO_EXTENSION);
                                    
                                    if (!is_file($folder."/".$_FILES["image"]["name"])) 
                                    {
                                             
                                            move_uploaded_file($_FILES["image"]["tmp_name"], $folder."/".$newFilename . "." . $ext);
                                            
                                            
                                            $imageurl = $folder."/".$newFilename.".".$ext;

                                            //return $imageurl;
                                            $ImageObject->user_id = $user_id;
                                            
                                            $ImageObject->image = $imageurl;

                                            $ImageObject->textimage = $text_input;
                                           
                                            $ImageObject->image_duration = $duration;
                                            
                                            $ImageObject->yes = 0;
                                            
                                            $ImageObject->no = 0;

                                            $ImageObject->maybe = 0;
                                            
                                            $ImageObject->total = $ImageObject->yes + $ImageObject->no + $ImageObject->maybe;
                                            
                                            $ImageObject->poll_titlemage = $imagetitle;
                                            
                                            $ImageObject->access_list = "";
                                            
                                            $ImageObject->created_at = date("Y-m-d");
                                            
                                            $ImageObject->updated_at = date("Y-m-d");
                                            
                                            if ($ImageObject->save()) 
                                            {
                                                $json_output['meta']["status"] = 0;
                                                $json_output['meta']["message"] = "Image successfully saved Check Image info at baseurl/image/list";
                                                $json_output['data']["imageurl"] = $imageurl;
                                                $json_output['data']["text"] = $app->request->post('text');
                                            }
                                            else 
                                            {
                                                $json_output['meta']["status"] = 3;
                                                $json_output['meta']["message"] = "Failed to save image";
                                            }

                                    }
                                    else 
                                    {

                                        $json_output['meta']["status"] = 2;
                                        $json_output['meta']["message"] = "Image already exist";
                                    }
                                    

                            }
                            else 
                            {

                            $json_output['meta']["status"] = 3;
                            $json_output['meta']["message"] = "File is not an Image";

                                
                            }

                        }
            

        $phonenumber = $app->request->post('nickname');
        echo $phonenumber;

                $app->response->header('Content-Type', 'application/json');
                 echo json_encode($json_output);

    } catch (Exception $e) {

        sendUnknownError($app, $e);
    }

});


$app->post('/text/post', function() use ($app) {

    try {

            // specify Url to upload Images
            $url_prefix = "../contents/";
            $folder = $url_prefix."texftorpoll";
            $textObject = new TextPoll;
            $user_id = 2;
            // id is user authenticated Id
            //$id = $_SESSION['id'];

            if (!is_dir($folder)) 
            {

               mkdir($folder);

            } 
            if(!isset($_FILES["image"]["name"]) or !isset($_POST['duration']) or !isset($_POST['text']) or !isset($_POST['texttitle']))
            {

                $json_output['meta']["status"] = 3;
                $json_output['meta']["message"] = "Make sure all your parameters are all set";
            }
            else 
                        {
                             $no = ImagePoll::count();
                             $newFilename = md5($no);

                            if ((($_FILES["image"]["type"] == "image/gif")||($_FILES["image"]["type"] == "image/jpeg")|| ($_FILES["image"]["type"] == "image/png")|| ($_FILES["image"]["type"] == "image/pjpeg"))&& ($_FILES["image"]["size"] < 2000000)) 
                            {
                                $ext = pathinfo($_FILES["image"]["name"], PATHINFO_EXTENSION);
                                    
                                    if (!is_file($folder."/".$_FILES["image"]["name"])) 
                                    {
                                             
                                            move_uploaded_file($_FILES["image"]["tmp_name"], $folder."/".$newFilename . "." . $ext);
                                            
                                            
                                            $imageurl = $folder."/".$newFilename.".".$ext;

                                            //return $imageurl;
                                            $textObject->user_id = $user_id;
                                            
                                            $textObject->input_image = $imageurl;

                                            $textObject->input_text = $app->request->post('text');
                                           
                                            $textObject->text_duration = $app->request->post('duration');
                                    
                                            $textObject->yes = 0;
                                            
                                            $textObject->no = 0;

                                            $textObject->maybe = 0;
                                            
                                            $textObject->total = 0;
                                            
                                            $textObject->poll_titletext = $app->request->post('texttitle');
                                            
                                            $textObject->access_list = "";
                                            
                                            $textObject->created_at = date("Y-m-d");
                                            
                                            $textObject->updated_at = date("Y-m-d");
                                            
                                            if ($textObject->save()) 
                                            {
                                                $json_output['meta']["status"] = 0;
                                                $json_output['meta']["message"] = "text successfully saved. Check your text info at baseurl/text/list";
                                            }
                                            else 
                                            {
                                                $json_output['meta']["status"] = 3;
                                                $json_output['meta']["message"] = "Failed to save image";
                                            }

                                    }
                                    else 
                                    {

                                        $json_output['meta']["status"] = 2;
                                        $json_output['meta']["message"] = "Image already exist";
                                    }
                                    

                            }
                            else 
                            {

                            $json_output['meta']["status"] = 3;
                            $json_output['meta']["message"] = "File is not an Image";

                                
                            }

                        }
            

                $app->response->header('Content-Type', 'application/json');
                 echo json_encode($json_output);

    } catch (Exception $e) {

        sendUnknownError($app, $e);
    }

});


$app->get('/text/list', function() use ($app){
    

    try {
        
        //$id = $app->request->get('id');
            $textObject = TextPoll::all();

                $json_output['meta']["status"] = 0;
                $json_output['meta']["message"] = "Request successfully";
                
                $textArray = $textObject->toArray();
                $json_output['data']['user'] = $textArray;


        $app->response->header('Content-Type', 'application/json');
        echo json_encode($json_output);

    } catch (Exception $e) {
        print_r($e->getMessage());
    }

});

$app->get('/text/listbyuserId', function() use ($app){
    

    try {

           $token = $app->getCookie('token');
           $findId = Usertoken::select('user_id')
                        ->whereRaw('token = ?', array($token))
                        ->first();

                if (isset($findId)) 
                {
                
                $userId = $findId->toArray();
                $user_id = $userId['user_id'];
                
                $textObject = TextPoll::whereRaw('user_id = ?', array($user_id))
                                    ->first();

                $json_output['meta']["status"] = 0;
                $json_output['meta']["message"] = "Request Successfully";
                
                $textArray = $textObject->toArray();
                $json_output['data']['user'] = $textArray;
        
                }
                else
                {
                    $json_output['meta']["status"] = 2;
                    $json_output['meta']["message"] = "User id not valid";
                }


        $app->response->header('Content-Type', 'application/json');
        echo json_encode($json_output);

    } catch (Exception $e) {
        print_r($e->getMessage());
    }

});


$app->get('/text/list/:id', function($id) use ($app){
    

    try {
        
        //$id = $app->request->get('id');
            $textObject = TextPoll::find($id);

                if (isset($textObject)) 
                {
                    
                $json_output['meta']["status"] = 0;
                $json_output['meta']["message"] = "Request successfully";
                
                $textArray = $textObject->toArray();
                $json_output['data']['user'] = $textArray;
                }
                else 
                {
                    
                $json_output['meta']["status"] = 2;
                $json_output['meta']["message"] = "text doesnot exist";
                
                }




        $app->response->header('Content-Type', 'application/json');
        echo json_encode($json_output);

    } catch (Exception $e) {
        print_r($e->getMessage());
    }

});


$app->get('/image/list', function() use ($app){
    

    try {
        
        //$id = $app->request->get('id');
            $ImageObject = ImagePoll::all();

                if (isset($ImageObject)) {
                
                    $json_output['meta']["status"] = 0;
                    $json_output['meta']["message"] = "Request successfully";
                    
                    $ImageArray = $ImageObject->toArray();
                    $json_output['data']['user'] = $ImageArray;
                   
                }
                else 
                {

                    $json_output['meta']["status"] = 2;
                    $json_output['meta']["message"] = "Out of Bounds";
                    
                }


        $app->response->header('Content-Type', 'application/json');
        echo json_encode($json_output);

    } catch (Exception $e) {
        print_r($e->getMessage());
    }

});

$app->get('/image/listbyuserId', function() use ($app){
    

    try {
        
        //$id = $app->request->get('id');
           $token = $app->getCookie('token');
           $findId = Usertoken::select('user_id')
                        ->whereRaw('token = ?', array($token))
                        ->first();

                if (isset($findId)) 
                {
                
                $userId = $findId->toArray();
                $user_id = $userId['user_id'];
                
                $ImageObject = ImagePoll::whereRaw('user_id = ?', array($user_id))
                                    ->first();

                $json_output['meta']["status"] = 0;
                $json_output['meta']["message"] = "Request Successfully";
                
                $ImageArray = $ImageObject->toArray();
                $json_output['data']['user'] = $ImageArray;
        
                }
                else
                {
                    $json_output['meta']["status"] = 2;
                    $json_output['meta']["message"] = "User id not valid";
                }


        $app->response->header('Content-Type', 'application/json');
        echo json_encode($json_output);

    } catch (Exception $e) {
        print_r($e->getMessage());
    }

});


$app->get('/image/list/:id', function($id) use ($app){
    

    try {
        
        //$id = $app->request->get('id');
            $ImageObject = ImagePoll::find($id);

               if (isset($ImageObject)) {
                
                    $json_output['meta']["status"] = 0;
                    $json_output['meta']["message"] = "Request successfully";
                    
                    $ImageArray = $ImageObject->toArray();
                    $json_output['data']['user'] = $ImageArray;
                   
                }
                else 
                {

                    $json_output['meta']["status"] = 2;
                    $json_output['meta']["message"] = "Image does not exist";
                    
                }


        $app->response->header('Content-Type', 'application/json');
        echo json_encode($json_output);

    } catch (Exception $e) {
        print_r($e->getMessage());
    }

});


$app->get('/text/:id/(add/accessList/)', function($id) use ($app){
    

    try {
            $nickname = $app->request->get('nickname');
            $token = $app->getCookie('token');
            $findId = Usertoken::select('user_id')
                        ->whereRaw('token = ?', array($token))
                        ->first();

                if (isset($findId) and isset($nickname)) 
                {
                
                $userId = $findId->toArray();
                $user_id = $userId['user_id'];

                $checkNickname = User::select('id', 'nickname')
                                    ->whereRaw('nickname = ?', array($nickname))
                                    ->first();

                $checkforDuplicateNickname = TextPoll::select('id', 'access_list')
                                                ->whereRaw('id = ?', array($id))
                                                ->where('access_list', 'LIKE', '%'.$nickname.'%')
                                                ->first();



                $text_access = TextPoll::select('id', 'user_id', 'access_list', 'input_text')
                                    ->whereRaw('user_id = ? AND id = ?', array($user_id, $id))
                                    ->first();

                    if (isset($text_access)) 
                    {
                        $access = $text_access->toArray();
                        // put friends name in a long string
                        $listOfaccess = $access['access_list'];

                        if (isset($checkNickname)) 
                        {
                            if (isset($checkforDuplicateNickname)) 
                            {

                                $json_output['meta']["status"] = 2;
                                $json_output['meta']["message"] = "Nickname is already on Access list";
                            }

                            else
                            {
                                
                                if (trim($listOfaccess) == "" || $listOfaccess == null) 
                                {
                                    $listOfaccess = $nickname;

                                    $json_output['meta']["status"] = 0;
                                    $json_output['meta']["message"] = "Access list has been Updated";

                                }
                                else 
                                {
                                    $listOfaccess = $listOfaccess.", ".$nickname;
                                        
                                    $json_output['meta']["status"] = 0;
                                    $json_output['meta']["message"] = "Access list has been Updated";
                                }


                            $json_output['data']['user'] = $listOfaccess;
                            
                            $text_access->access_list = $listOfaccess;
                            $text_access->save();
                                
                        }

                            }
                        else
                        {
                            $json_output['meta']["status"] = 2;
                            $json_output['meta']["message"] = "Nickname is not on pollvogue";
                        }
                                
                    }
                    else
                    {
                            $json_output['meta']["status"] = 2;
                            $json_output['meta']["message"] = "You didnot create this text";
                    }



                }
                else 
                {
                    $json_output['meta']["status"] = 2;
                    $json_output['meta']["message"] = "This text doesn't exist or Nickname is empty";
                }





        $app->response->header('Content-Type', 'application/json');
        echo json_encode($json_output);

    } catch (Exception $e) {
        print_r($e->getMessage());
    }

});


$app->get('/image/add/:id/(accessList)', function($id) use ($app) {
    

   try {
            $nickname = $app->request->get('nickname');
            $token = $app->getCookie('token');
            $findId = Usertoken::select('user_id')
                        ->whereRaw('token = ?', array($token))
                        ->first();

                if (isset($findId) and isset($nickname)) 
                {
                
                $userId = $findId->toArray();
                $user_id = $userId['user_id'];

                $checkNickname = User::select('id', 'nickname')
                                    ->whereRaw('nickname = ?', array($nickname))
                                    ->first();

                $checkforDuplicateNickname = ImagePoll::select('id', 'access_list')
                                                ->whereRaw('id = ?', array($id))
                                                ->where('access_list', 'LIKE', '%'.$nickname.'%')
                                                ->first();



                $text_access = ImagePoll::select('id', 'user_id', 'access_list', 'input_text')
                                    ->whereRaw('user_id = ? AND id = ?', array($user_id, $id))
                                    ->first();

                    if (isset($text_access)) 
                    {
                        $access = $text_access->toArray();
                        // put friends name in a long string
                        $listOfaccess = $access['access_list'];

                        if (isset($checkNickname)) 
                        {
                            if (isset($checkforDuplicateNickname)) 
                            {

                                $json_output['meta']["status"] = 2;
                                $json_output['meta']["message"] = "Nickname is already on Access list";
                            }

                            else
                            {
                                
                                if (trim($listOfaccess) == "" || $listOfaccess== null) 
                                {
                                    $listOfaccess = $nickname;

                                    $json_output['meta']["status"] = 0;
                                    $json_output['meta']["message"] = "Access list has been Updated";

                                }
                                else 
                                {
                                    $listOfaccess = $listOfaccess.", ".$nickname;
                                        
                                    $json_output['meta']["status"] = 0;
                                    $json_output['meta']["message"] = "Access list has been Updated";
                                }


                            $json_output['data']['user'] = $listOfaccess;
                            
                            $text_access->access_list = $listOfaccess;
                            $text_access->save();
                                
                        }

                            }
                        else
                        {
                            $json_output['meta']["status"] = 2;
                            $json_output['meta']["message"] = "Nickname is not on pollvogue";
                        }

                        
                    }
                    else
                    {
                            $json_output['meta']["status"] = 2;
                            $json_output['meta']["message"] = "You didnot create this text";
                    }



                }
                else 
                {
                    $json_output['meta']["status"] = 2;
                    $json_output['meta']["message"] = "The pics doesn't exist or your nickname is empty";
                }





        $app->response->header('Content-Type', 'application/json');
        echo json_encode($json_output);

    } catch (Exception $e) {
        print_r($e->getMessage());
    }

});


$app->get('/checkdates(/:year(/:month(/:day)))', function($year, $month, $day) use ($app) {

    $formatted_date = $year.'-'.$month.'-'.$day; 
    $longdate = strtotime($formatted_date);
    echo $longdate . ', ';
    echo date('Y-m-d', $longdate);

});


$app->get('/vote/text(/:id)', function($id) use ($app) {

          try {
            $vote = $app->request->get('vote');
            $token = $app->getCookie('token');
           
            $findId = Usertoken::select('user_id')
                        ->whereRaw('token = ?', array($token))
                        ->first();
            $textId = TextPoll::select('user_id')
                        ->whereRaw('id = ?', array($id))
                        ->first();
            $CheckIfNicknameHasAccess = TextPoll::select('user_id', 'access_list')
                        ->whereRaw('id = ?', array($id))
                        ->first();

                if (isset($findId) and isset($textId)) 
                {
                
                    $userId = $findId->toArray();
                    $user_id = $userId['user_id'];

                        $findUserNickname = User::select('id', 'nickname')
                                            ->whereRaw('id = ?', array($user_id))
                                            ->first();
                                   
                            $userNickname = $findUserNickname->toArray();
                            $nickname = $userNickname['nickname'];
                            //echo $nickname;

                    $text = TextPoll::select('id', 'input_text', 'yes', 'no', 'maybe', 'ratiotext')
                                        ->where('id', '=', $id)
                                        ->where('access_list', 'LIKE', '%'.$nickname.'%')
                                        ->first();

                    if ($text) 
                    {

                                    $checkIfUserVoted = Polltable::select('id', 'user_id')
                                                    ->where('TextOrImage_id', '=', $id)
                                                    ->where('type', '=', "text")
                                                    ->where('user_id', '=', $user_id)
                                                    ->first();
                                    if (trim(strtolower($vote)) == "yes" || trim(strtolower($vote)) == "no" || trim(strtolower($vote)) == "maybe") 
                                    {
                                            if (isset($checkIfUserVoted))
                                            {
                                                
                                                $json_output['meta']["status"] = 2;
                                                $json_output['meta']["message"] = "You cant vote twice";

                                            }
                                            else 
                                            {

                                                $textVote = $text->toArray();
                                                $yesVote = $textVote['yes'];
                                                $noVote = $textVote['no'];
                                                $maybeVote = $textVote['maybe'];

                                                $poll = new Polltable;

                                                $poll->user_id = $user_id;
                                                $poll->TextOrImage_id = $id;
                                                $poll->type = "text";
                                                $poll->votes = $vote;
                                                $poll->created_at = date('Y-m-d h:i:s');
                                                $poll->save();



                                                if ($vote == "yes") 
                                                {
                                                    $yesVote++;
                                                }
                                                if ($vote == "no") 
                                                {
                                                    $noVote++;
                                                }
                                                if ($vote == "maybe") 
                                                {
                                                    $maybeVote++;
                                                }

                                                $text->yes = $yesVote;
                                                $text->no = $noVote;
                                                $text->maybe = $maybeVote;
                                                $text->save();

                                                $json_output['meta']["status"] = 0;
                                                $json_output['meta']["message"] = "Vote has been counted";

                                            }
                                         
                                    }  
                                    else 
                                    {
                                        $json_output['meta']["status"] = 0;
                                        $json_output['meta']["message"] = "Vote can only be yes, no or maybe";

                                    }


                    }
                    else
                    {
                    $json_output['meta']["status"] = 2;
                    $json_output['meta']["message"] = "You cannot vote this text if you do not have access";
                    }






                }
                else 
                {
                    $json_output['meta']["status"] = 2;
                    $json_output['meta']["message"] = "Out of Bound";
                }

            $app->response->header('Content-Type', 'application/json');
            echo json_encode($json_output);

            } catch (Exception $e) {
                print_r($e->getMessage());
            }

});


$app->get('/vote/image(/:id)', function($id) use ($app) {

          try {
            $vote = $app->request->get('vote');

            $token = $app->getCookie('token');
           
            $findId = Usertoken::select('user_id')
                        ->whereRaw('token = ?', array($token))
                        ->first();
            $textId = ImagePoll::select('user_id')
                        ->whereRaw('id = ?', array($id))
                        ->first();
            $CheckIfNicknameHasAccess = TextPoll::select('user_id', 'access_list')
                        ->whereRaw('id = ?', array($id))
                        ->first();

                if (isset($findId) and isset($textId)) 
                {
                
                    $userId = $findId->toArray();
                    $user_id = $userId['user_id'];

                        $findUserNickname = User::select('id', 'nickname')
                                            ->whereRaw('id = ?', array($user_id))
                                            ->first();
                                   
                            $userNickname = $findUserNickname->toArray();
                            $nickname = $userNickname['nickname'];
                            //echo $nickname;

                    $text = ImagePoll::select('id', 'yes', 'no', 'maybe')
                                        ->where('id', '=', $id)
                                        ->where('access_list', 'LIKE', '%'.$nickname.'%')
                                        ->first();

                    if ($text) 
                    {

                                    $checkIfUserVoted = Polltable::select('id', 'user_id')
                                                    ->where('TextOrImage_id', '=', $id)
                                                    ->where('type', '=', "image")
                                                    ->where('user_id', '=', $user_id)
                                                    ->first();
                                    if (trim(strtolower($vote)) == "yes" || trim(strtolower($vote)) == "no" || trim(strtolower($vote)) == "maybe") 
                                    {
                                        
                                            if (isset($checkIfUserVoted))
                                            {
                                                
                                                $json_output['meta']["status"] = 2;
                                                $json_output['meta']["message"] = "You can't vote twice";

                                            }
                                            else 
                                            {

                                                $textVote = $text->toArray();
                                                $yesVote = $textVote['yes'];
                                                $noVote = $textVote['no'];
                                                $maybeVote = $textVote['maybe'];

                                                $poll = new Polltable;

                                                $poll->user_id = $user_id;
                                                $poll->TextOrImage_id = $id;
                                                $poll->type = "image";
                                                $poll->votes = $vote;
                                                $poll->created_at = date('Y-m-d h:i:s');
                                                $poll->save();



                                                if ($vote == "yes") 
                                                {
                                                    $yesVote++;
                                                }
                                                if ($vote == "no") 
                                                {
                                                    $noVote++;
                                                }
                                                if ($vote == "maybe") 
                                                {
                                                    $maybeVote++;
                                                }

                                                $text->yes = $yesVote;
                                                $text->no = $noVote;
                                                $text->maybe = $maybeVote;
                                                $text->save();

                                                $json_output['meta']["status"] = 0;
                                                $json_output['meta']["message"] = "Vote has been counted";

                                            }


                                    }
                                    else 
                                    {
                                        $json_output['meta']["status"] = 0;
                                        $json_output['meta']["message"] = "Vote can only be yes, no or maybe";

                                    }
                    }
                    else
                    {
                    $json_output['meta']["status"] = 2;
                    $json_output['meta']["message"] = "You cannot vote this pics if you do not have access";
                    }






                }
                else 
                {
                    $json_output['meta']["status"] = 2;
                    $json_output['meta']["message"] = "Out of Bound";
                }

            $app->response->header('Content-Type', 'application/json');
            echo json_encode($json_output);

            } catch (Exception $e) {
                print_r($e->getMessage());
            }

});



function getUserIdFromToken($app) {

    $env = $app->environment();
    $token = $app->request->params('token');
    return $env[$token]['user_id'];
}


$app->run();